public class StateAndReward {	
	
	public static int angleStates = 11;
	public static int angleLimit = 2;
	
	public static final int velocityStates = 7;
	public static final int velocityLimit = 1;
	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {
		String state = "STATE-" + discretize(angle, angleStates,-2,2);
		return state;
	}
	

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {
		int centerAngleState = (angleStates-1)/2;
		int angleState = discretize(angle,angleStates,-2,2);
		
		double reward = Math.pow((centerAngleState - Math.abs(angleState - centerAngleState)), 2); // 5 - abs(x-5)
		
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {
		String state = "STATE-" + discretize(angle, angleStates, -angleLimit, angleLimit) + 
				"-VY-" + discretize(vy, velocityStates, -velocityLimit, velocityLimit);
		return state;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {
		int centerAngleState = (angleStates-1)/2;
		int angleState = discretize(angle,angleStates,-2,2);
		
		int targetVelocityState = (velocityStates-1)/2;
		int velocityState = discretize(vy, velocityStates, -VELOCITY_BOUND, VELOCITY_BOUND);
		
		double angleReward = Math.pow((centerAngleState - Math.abs(angleState - centerAngleState)), 2); // 5 - abs(x-5)
		double velocityReward = Math.pow((targetVelocityState - Math.abs(velocityState - targetVelocityState)), 2); // 5 - abs(x-5)
		
		return angleReward + velocityReward;
	}

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
